pipeline {
    agent any          // o el label de tu nodo

    // ─────────────────────────
    // Variables de entorno
    // ─────────────────────────
    environment {
        APP_ENV          = 'testing'   // modo test de Laravel
        DB_CONNECTION    = 'sqlite'
        DB_DATABASE      = ':memory:'
        CACHE_DRIVER     = 'array'
        QUEUE_CONNECTION = 'sync'
        SONAR_PROJECTKEY = 'examen_backend'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                          userRemoteConfigs: [[
                              url: 'https://github.com/ffrank123/examennn.git',
                              credentialsId: 'github_pat'
                          ]],
                          branches: [[name: '*/main']]
                ])
            }
        }

        stage('Composer install') {
            agent {
                docker {
                    image 'composer:2.7'          // PHP 8.3-cli + Composer
                    args  '-u 1000:1000'
                }
            }
            steps {
                sh '''
                    composer install --no-interaction --prefer-dist --ansi
                    cp .env.example .env
                    php -r "file_put_contents('.env', str_replace('DB_CONNECTION=mysql', 'DB_CONNECTION=${DB_CONNECTION}', file_get_contents('.env')));"
                    php -r "file_put_contents('.env', str_replace('DB_DATABASE=laravel', 'DB_DATABASE=${DB_DATABASE}', file_get_contents('.env')));"
                    php artisan key:generate --ansi
                '''
            }
        }

        stage('Test Suite') {
            steps {
                sh './vendor/bin/phpunit --testdox --log-junit build/logs/phpunit.xml'
            }
            post {
                always { junit 'build/logs/phpunit.xml' }
            }
        }

        stage('SonarQube Scan') {
            agent {
                docker { image 'sonarsource/sonar-scanner-cli:latest' }
            }
            environment {
                SONAR_HOST_URL = credentials('sonarqube_url')   // si usas credencial separada
                SONAR_LOGIN    = credentials('sonarqube_token')
            }
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh 'sonar-scanner -Dsonar.projectKey=$SONAR_PROJECTKEY -Dsonar.sources=app -Dsonar.php.coverage.reportPaths=build/logs/phpunit.xml'
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }

    post {
        success { echo '✅ Build OK – Tests y análisis pasaron.' }
        failure { echo '❌ Build falló – revisa la consola y los logs.' }
    }
}
