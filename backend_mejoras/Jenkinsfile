pipeline {
    agent any

    environment {
        APP_ENV          = 'testing'
        DB_CONNECTION    = 'sqlite'
        DB_DATABASE      = ':memory:'
        CACHE_DRIVER     = 'array'
        QUEUE_CONNECTION = 'sync'
        SONAR_PROJECTKEY = 'examen_backend'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                    userRemoteConfigs: [[
                        url: 'https://github.com/ffrank123/examennn.git',
                        credentialsId: 'github_pat'
                    ]],
                    branches: [[name: '*/main']]
                ])
            }
        }

        stage('Composer install') {
            agent {
                docker {
                    image 'php:8.2-cli'
                    args  '-u root:root'
                }
            }
            steps {
                sh '''
                    apt-get update && apt-get install -y unzip git curl
                    curl -sS https://getcomposer.org/installer | php
                    mv composer.phar /usr/local/bin/composer

                    export COMPOSER_HOME=$(pwd)/.composer
                    mkdir -p $COMPOSER_HOME

                    composer install --no-interaction --prefer-dist --ansi
                    cp .env.example .env
                    php artisan key:generate --ansi
                '''
            }
        }

        stage('Test Suite') {
            steps {
                sh '''
                    mkdir -p build/logs
                    ./vendor/bin/phpunit --testdox --log-junit build/logs/phpunit.xml
                '''
            }
            post {
                always {
                    junit 'build/logs/phpunit.xml'
                }
            }
        }

        stage('SonarQube Scan') {
            agent {
                docker {
                    image 'sonarsource/sonar-scanner-cli:latest'
                    args  '-u root:root'
                }
            }
            environment {
                SONAR_HOST_URL = 'http://sonarqube:9000'
                SONAR_LOGIN    = credentials('sonarqube_token')
            }
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh '''
                        sonar-scanner \
                        -Dsonar.projectKey=$SONAR_PROJECTKEY \
                        -Dsonar.sources=app \
                        -Dsonar.php.coverage.reportPaths=build/logs/phpunit.xml
                    '''
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }

    post {
        success {
            echo '✅ Build OK – Tests y análisis pasaron.'
        }
        failure {
            echo '❌ Build falló – revisa la consola y los logs.'
        }
    }
}
