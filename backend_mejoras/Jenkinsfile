pipeline {
    agent any

    environment {
        APP_ENV          = 'testing'
        DB_CONNECTION    = 'sqlite'
        DB_DATABASE      = ':memory:'
        CACHE_DRIVER     = 'array'
        QUEUE_CONNECTION = 'sync'
        SONAR_PROJECTKEY = 'turismo-capachica'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Composer install') {
            agent {
                docker {
                    image 'php:8.2-cli'
                    args  '-u root:root'
                }
            }
            steps {
                dir('backend_mejoras') {
                    sh '''
                        apt-get update
                        apt-get install -y unzip git curl sqlite3 libsqlite3-dev zlib1g-dev libzip-dev

                        # Instalar extensiones necesarias para Laravel y SQLite
                        docker-php-ext-install pdo pdo_sqlite zip

                        curl -sS https://getcomposer.org/installer | php
                        mv composer.phar /usr/local/bin/composer

                        composer install --no-interaction --prefer-dist --ansi
                        cp .env.example .env
                        php artisan key:generate --ansi
                    '''
                }
            }
        }

        stage('Test Suite') {
            steps {
                dir('backend_mejoras') {
                    sh '''
                        mkdir -p build/logs
                        chmod +x ./vendor/bin/phpunit
                        ./vendor/bin/phpunit --testdox --log-junit build/logs/phpunit.xml
                    '''
                }
            }
            post {
                always {
                    junit 'backend_mejoras/build/logs/phpunit.xml'
                }
            }
        }

        stage('SonarQube Scan') {
            agent {
                docker {
                    image 'sonarsource/sonar-scanner-cli:latest'
                    args  '-u root:root'
                }
            }
            environment {
                SONAR_HOST_URL = 'http://sonar:9000'
                SONAR_LOGIN    = credentials('sonarqube_token')
            }
            steps {
                dir('backend_mejoras') {
                    withSonarQubeEnv('sonarqube') {
                        sh '''
                            sonar-scanner \
                            -Dsonar.projectKey=$SONAR_PROJECTKEY \
                            -Dsonar.sources=app \
                            -Dsonar.php.coverage.reportPaths=build/logs/phpunit.xml
                        '''
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }

    post {
        success {
            echo '✅ Build OK – Tests y análisis pasaron.'
        }
        failure {
            echo '❌ Build falló – revisa la consola y los logs.'
        }
    }
}
