/*
 * Declarative Pipeline para backend Laravel (PHP 8.1) con:
 *  – Composer install
 *  – Key de la app
 *  – Test suite PHPUnit sobre SQLite in-memory
 *  – SonarQube scan + Quality Gate
 *
 * Requiere:
 *  • Credencial “github_pat”  → tu PAT de GitHub (Username/Password)
 *  • SonarQube server llamado “sonarqube” en Jenkins (Manage → Configure System)
 *  • Herramienta “sonar-scanner” instalada en Jenkins (o usa la image docker más abajo)
 */

pipeline {
    agent any       // o el label de tu agente Linux

    environment {
        # Vars básicas.
        APP_ENV          = 'testing'
        DB_CONNECTION    = 'sqlite'
        DB_DATABASE      = ':memory:'
        CACHE_DRIVER     = 'array'
        QUEUE_CONNECTION = 'sync'
        # Sonar
        SONAR_PROJECTKEY = 'examen_backend'
    }

    stages {
        stage('Checkout') {
            steps {
                // Usa tu PAT guardado como “github_pat”
                checkout([$class: 'GitSCM',
                          userRemoteConfigs: [[
                              url: 'https://github.com/ffrank123/EXAMENN.git',
                              credentialsId: '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'
                          ]],
                          branches: [[name: '*/main']]
                ])
            }
        }

        stage('Composer install') {
            agent {
                docker {
                    image 'composer:2.7'      // PHP 8.3-cli + Composer
                    args  '-u 1000:1000'      // Evita líos de permisos
                }
            }
            steps {
                sh '''
                    composer install --no-interaction --prefer-dist --ansi
                    cp .env.example .env
                    php -r "file_put_contents('.env', str_replace('DB_CONNECTION=mysql', 'DB_CONNECTION=${DB_CONNECTION}', file_get_contents('.env')));"
                    php -r "file_put_contents('.env', str_replace('DB_DATABASE=laravel', 'DB_DATABASE=${DB_DATABASE}', file_get_contents('.env')));"
                    php artisan key:generate --ansi
                '''
            }
        }

        stage('Test Suite') {
            agent { reuseNode true }         // reutiliza el mismo contenedor
            steps {
                sh './vendor/bin/phpunit --testdox --log-junit build/logs/phpunit.xml'
            }
            post {
                always {
                    junit 'build/logs/phpunit.xml'
                }
            }
        }

        stage('SonarQube Scan') {
            agent {
                docker {
                    image 'sonarsource/sonar-scanner-cli:latest'
                }
            }
            environment {
                SONAR_HOST_URL = credentials('sonarqube_url')    // opcional: o usa el plugin
                SONAR_LOGIN    = credentials('sonarqube_token')
            }
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh 'sonar-scanner -Dsonar.projectKey=$SONAR_PROJECTKEY -Dsonar.sources=app -Dsonar.php.coverage.reportPaths=build/logs/phpunit.xml'
                }
            }
        }

        stage('Quality Gate') {
            // Bloquea el pipeline si la puerta de calidad no pasa (timeout 5 min)
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }

    post {
        success { echo '✅ Build OK – Tests y análisis pasaron.' }
        failure { echo '❌ Build falló – revisa la consola y los logs.' }
    }
}
